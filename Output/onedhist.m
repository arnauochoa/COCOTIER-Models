function [bins,N]=onedhist(data, edges, n_pts, ref_fun)%*     Copyright c 2012 The board of trustees of the Leland Stanford     *%*                      Junior University. All rights reserved.          *%*     This script file may be distributed and used freely, provided     *%*     this copyright notice is always kept with it.                     *%*                                                                       *%*     Questions and comments should be directed to Todd Walter at:      *%*     twalter@stanford.edu                                              *%ONEDHIST%   ONEDHIST(DATA, N_PTS) takes a vector and plots the 1 dimensional histogram%   on a log scale.%   DATA is the vector of data to be plotted%   N_PTS is an optional normalization parameter.  Default is the length of%   the vector%%   See also POSSTAT BOUND TWODHIST%   TWalter Apr 19th 2000%check the input argumentsif nargin < 1  error('You must specify the input data')endif nargin < 2    edges = [];endif nargin < 3  n_pts=length(data);endif nargin < 4  ref_fun = [];% elseif ~ischar(ref_fun)%   ref_fun='normcdf';end%get the axes and determine the extent of the data%clfplot(data,'.');ax=axis;max_data=max(abs(ax(3:4)));%determine if this is a one sided or a two sided distributionif min(data) >= 0  one_sided=1;else  one_sided=0;end%histogram the dataif isempty(edges)    if one_sided        edges = (0:100)*max_data/100;    else        edges = (-1:0.02:1)*max_data;    end else    max_data = max(abs(edges));endN=histc(data,edges);N=N(1:end-1);bins=(edges(1:end-1) + edges(2:end))/2;    if nargout  returnend%determine the lower bound for a semilog plotlo_bnd = 10.^(-(ceil(log10(n_pts))));%get the x and y coordinates for the histogram barsbarwidth = 0.8;if size(edges,2) > 1    if size(edges,1) > 1        error('edges must be a vector');    else        edges = edges';    endendX = [(barwidth*edges(1:end-1) + (1-barwidth)*edges(2:end))*[1 1] ...     ((1-barwidth)*edges(1:end-1) + barwidth*edges(2:end))*[1 1]];X=reshape(X',size(N,1)*4,1);e = ones(size(N));Y = [lo_bnd*e N/n_pts N/n_pts lo_bnd*e];Y=reshape(Y',size(N,1)*4,1); %plot the bar data and set the axessemilogy(X,Y, 'Linewidth', 1);grid onhold onset(gca,'FontSize', 12);set(gca,'LineWidth', 1);[ax] = axis;axis([ax(1) ax(2) lo_bnd 1]);n_bins=length(bins);if one_sided  idx=bound2(.68,N);else  idx=bound(.68,N);endif idx >= n_bins  one = ax(2);else  one = (bins(idx)+bins(idx+1))/2;endif one_sided  idx=bound2(.95,N);else  idx=bound(.95,N);endif idx >= n_bins  five = ax(2);else  five = (bins(idx)+bins(idx+1))/2;endif one_sided  idx=bound2(.999,N);else  idx=bound(.999,N);endif idx >= n_bins  nine = ax(2);else  nine = (bins(idx)+bins(idx+1))/2;endN=N/n_pts;[ax] = axis;% if ~one_sided%   plot([-one(1) -one(1)],[ax(3) ax(4)],'m', 'Linewidth', 1.5);%   plot([-five(1) -five(1)],[ax(3) ax(4)],'m-.', 'Linewidth', 1.5);%   plot([-nine(1) -nine(1)],[ax(3) ax(4)],'r--', 'Linewidth', 1.5);% end% plot([one(1) one(1)],[ax(3) ax(4)],'m', 'Linewidth', 1.5);% plot([five(1) five(1)],[ax(3) ax(4)],'m-.', 'Linewidth', 1.5);% plot([nine(1) nine(1)],[ax(3) ax(4)],'r--', 'Linewidth', 1.5);% ylabel ('Prob. of Occurrence');% text(.6*ax(2),0.1*log10(1/lo_bnd),['mean = ', ...%                                       num2str(mean(data(isfinite(data))))]);% if one(1) < ax(2)%   text(.6*ax(2),0.02*log10(1/lo_bnd),['68% < ',num2str(one(1))]);% else%   text(.6*ax(2),0.02*log10(1/lo_bnd),['68% > ',num2str(one(1))]);% end% if five(1) < ax(2)%   text(.6*ax(2),0.004*log10(1/lo_bnd),['95% < ',num2str(five(1))]);% else%   text(.6*ax(2),0.004*log10(1/lo_bnd),['95% > ',num2str(five(1))]);% end% if nine(1) < ax(2)%   text(.6*ax(2),0.0008*log10(1/lo_bnd),['99.9% < ',num2str(nine(1))]);% else%   text(.6*ax(2),0.0008*log10(1/lo_bnd),['99.9% > ',num2str(nine(1))]);% endif ~isempty(ref_fun)  if one_sided    int_ref=feval(ref_fun,bins - 0.0005*max_data);    int_ref(end+1)=1;    ref_model=diff(int_ref);  else    nbins = length(bins);    int_ref1=feval(ref_fun,-(bins((nbins/2):-1:1) + 0.0001*max_data));    int_ref1(nbins/2 + 1)=.5;    int_ref2=feval(ref_fun,bins((nbins/2 + 1):nbins) - 0.0001*max_data);    int_ref2(nbins/2 + 1)=.5;    ref_model(nbins/2:-1:1)=diff(int_ref1);    ref_model((nbins/2 + 1):nbins)=diff(int_ref2);  end  semilogy(bins,ref_model,'r', 'Linewidth', 1);end