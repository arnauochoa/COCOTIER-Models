function onedhistplot(counts, bins)%*     Copyright c 2013 The board of trustees of the Leland Stanford     *%*                      Junior University. All rights reserved.          *%*     This script file may be distributed and used freely, provided     *%*     this copyright notice is always kept with it.                     *%*                                                                       *%*     Questions and comments should be directed to Todd Walter at:      *%*     twalter@stanford.edu                                              *%ONEDHISTPLOT%   ONEDHISTPLOT(COUNTS, BINS, N_PTS, REF_FUN) takes a vector of counts and%   bin centers plots the 1 dimensional histogram on a log scale.%   COUNTS is the vector of bin counts to be plotted%   BINS specifies the bin center locations%   N_PTS is an optional normalization parameter.  Default is the sum of%     the counts%   REF_FUN is a reference function to plot%%   See also POSSTAT BOUND TWODHIST%   TWalter Apr 8th 2013%check the input argumentsif nargin < 2  error('You must specify the input counts and bins')end% bins = ((1:800)*5.0000e-04 -.2)*100;n_pts=sum(counts);clf;%determine if this is a one sided or a two sided distributionif min(bins) >= 0  one_sided=1;else  one_sided=0;end%determine the lower bound for a semilog plotlo_bnd = 10.^(-(ceil(log10(n_pts))));%get the x and y coordinates for the histogram barsif size(bins,2) > 1    if size(bins,1) > 1        error('bins must be a vector');    else        bins = bins';    endenddbins = mean(diff(bins))*0.3;X = [(bins - dbins)*[1 1] (bins + dbins)*[1 1]];X=reshape(X',size(counts,1)*4,1);e = ones(size(counts));Y = [lo_bnd*e counts/n_pts counts/n_pts lo_bnd*e];Y=reshape(Y',size(counts,1)*4,1); %plot the bar data and set the axessemilogy(X,Y, 'Linewidth', 1);grid onhold onset(gca,'FontSize', 12);set(gca,'LineWidth', 1);[ax] = axis;axis([-0.4 .4 lo_bnd 1]);n_bins=length(bins);if one_sided  idx=bound2(.95,counts);else  idx=bound(.95,counts);endif idx >= n_bins  p1 = ax(2);else  p1 = (bins(idx)+bins(idx+1))/2;endif one_sided  idx=bound2(.999,counts);else  idx=bound(.999,counts);endif idx >= n_bins  p2 = ax(2);else  p2 = (bins(idx)+bins(idx+1))/2;endif one_sided  idx=bound2(.99999,counts);else  idx=bound(.99999,counts);endif idx >= n_bins  p3 = ax(2);else  p3 = (bins(idx)+bins(idx+1))/2;endcounts=counts/n_pts;[ax] = axis;if ~one_sided  plot([-p1(1) -p1(1)],[ax(3) ax(4)],'m', 'Linewidth', 1.5);  plot([-p2(1) -p2(1)],[ax(3) ax(4)],'m-.', 'Linewidth', 1.5);  plot([-p3(1) -p3(1)],[ax(3) ax(4)],'r--', 'Linewidth', 1.5);endplot([p1(1) p1(1)],[ax(3) ax(4)],'m', 'Linewidth', 1.5);plot([p2(1) p2(1)],[ax(3) ax(4)],'m-.', 'Linewidth', 1.5);plot([p3(1) p3(1)],[ax(3) ax(4)],'r--', 'Linewidth', 1.5);ylabel ('Prob. of Occurrence');text(.4*ax(2),0.09*log10(1/lo_bnd),['mean = ', ...                                      num2str(mean(counts(isfinite(counts))))], 'FontSize', 14);if p1(1) < ax(2)  text(.4*ax(2),0.02*log10(1/lo_bnd),['95% < ',num2str(p1(1))], 'FontSize', 14);else  text(.4*ax(2),0.02*log10(1/lo_bnd),['95% > ',num2str(p1(1))], 'FontSize', 14);endif p2(1) < ax(2)  text(.4*ax(2),0.004*log10(1/lo_bnd),['99.9% < ',num2str(p2(1))], 'FontSize', 14);else  text(.4*ax(2),0.004*log10(1/lo_bnd),['99.9% > ',num2str(p2(1))], 'FontSize', 14);endif p3(1) < ax(2)  text(.4*ax(2),0.0008*log10(1/lo_bnd),['99.999% < ',num2str(p3(1))], 'FontSize', 14);else  text(.4*ax(2),0.0008*log10(1/lo_bnd),['99.999% > ',num2str(p3(1))], 'FontSize', 14);end% if ~isempty(ref_fun)%   if one_sided%     int_ref=feval(ref_fun,bins(1:100) - 0.0005*max_data);%     int_ref(101)=1;%     ref_model=diff(int_ref);%   else%     int_ref1=feval(ref_fun,-(bins(50:-1:1) + 0.0001*max_data));%     int_ref1(51)=.5;%     int_ref2=feval(ref_fun,bins(51:100) - 0.0001*max_data);%     int_ref2(51)=.5;%     ref_model(50:-1:1)=diff(int_ref1);%     ref_model(51:100)=diff(int_ref2);%   end%   semilogy(bins,ref_model,'r', 'Linewidth', 1);% endxlabel('Iono Correction Error (m)')